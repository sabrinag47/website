install.packages("blogdown")
blogdown::install_hugo()
blogdown::new_site(theme="nurlansu/hugo-sustain")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages(shiny)
blogdown::new_post_addin
blogdown::new_post
devtools::install_github('rstudio/blogdown')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools:install_github('rstudio/blogdown')
devtools::install_github('rstudio/blogdown')
install.packages(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
devtools::install_github('rstudio/blogdown')
htmltools::install_github('rstudio/blogdown')
blogdown::new_post
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.package(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("tidyverse")
install.packages("latticeExtra")
install.packages(c("dplyr", "latticeExtra", "readr", "tidyverse"))
blogdown::serve_site()
install.packages("dplyr")
install.packages("dplyr")
install.packages(c("dplyr", "latticeExtra", "readr", "tidyverse"))
blogdown::serve_site()
install.packages("contrib.url")
install.packages("contribution")
blogdown::serve_site()
blogdown::serve_site()
install.packages("contrib.url")
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
#US Cancer Rates Dataset
install.packages("latticeExtra",repos = "http://cran.us.r-project.org")
library(latticeExtra)
cancer <- USCancerRates
head(cancer)
install.packages("LearnBayes")
blogdown::serve_site()
install.packages(c("glmnet", "lmtest", "plotROC", "sandwich"))
install.packages("sandwich")
blogdown::serve_site()
install.packages("lmtest")
blogdown::serve_site()
install.packages("plotROC")
install.packages("plotROC")
blogdown::serve_site()
install.packages("glmnet")
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE)
truth<-as.numeric(truth)-1
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
prob<-predict(fit4,type="response")
knitr::opts_chunk$set(echo = TRUE)
library(LearnBayes)
bird<-birdextinct
bird
man1<-manova(cbind(time,nesting)~status, data=bird)
summary.aov(man1)
man2<-manova(cbind(time,nesting)~size, data=bird)
summary.aov(man2)
pairwise.t.test(bird$time, bird$status, p.adj = "none")
pairwise.t.test(bird$time, bird$size, p.adj = "none")
rand_dist<-vector()
for(i in 1:5000){
new<-data.frame(time=sample(bird$time),size=bird$size)
rand_dist[i]<-mean(new[new$size=="1",]$time)
mean(new[new$size=="0",]$time)
}
library(tidyverse)
bird%>%group_by(size)%>%
summarize(means=mean(time))%>%
summarize(`mean_diff:`=diff(means))
{hist(rand_dist,main="",ylab=""); abline(v = -4.330437,col="red")}
fit<-lm(time~nesting, data=bird)
summary(fit)
coef(fit)
library(ggplot2)
ggplot(bird, aes(x=nesting, y=time,group=status))+geom_point(aes(color=status))+  geom_smooth(method="lm",formula=y~1,se=F,fullrange=T,aes(color=status))+xlab("nesting")
ggplot(bird, aes(x=nesting, y=time,group=size))+geom_point(aes(color=size))+  geom_smooth(method="lm",formula=y~1,se=F,fullrange=T,aes(color=size))+xlab("nesting")
library(sandwich); library(lmtest)
bptest(fit)
summary(fit)$coef[,1:2]
coeftest(fit, vcov=vcovHC(fit))[,1:2]
means<-vector()
for(i in 1:5000){
samp<-sample(bird$time,replace=T)
means[i]<-mean(samp)
}
quantile(means,c(.025, .975))
ggplot()+geom_histogram(aes(means))+geom_vline(xintercept=quantile(means,c(.025,.975)))
bootse<-function(x,n=5000){
means<-vector()
for(i in 1:n){
means[i]<- mean(sample(x,replace=T))
}
return(sd(means))
}
mean_se<-bird%>%group_by(size)%>%summarize(mean_time=mean(time),se=bootse(time))
mean_se
ggplot(mean_se, aes(x=size,y=mean_time))+geom_bar(stat="identity")+                           geom_errorbar(aes(ymax=mean_time+se, ymin=mean_time-se), width=.5)
fit6<-lm(time~size+nesting,data=bird)
fitvals<-fit6$fitted.value
resids<-fit6$residuals
fitted<-fit6$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, color='red')
resid_resamp<-replicate(5000,{
new_resids<-sample(resids,replace=TRUE)
bird$new_y<-fitted+new_resids
fit6<-lm(time~size+nesting,data=bird)
coef(fit6)
})
fit2<-glm(size~., family="binomial", data=bird)
coeftest(fit2)
fit3<-glm(status~time, family="binomial", data=bird)
coeftest(fit3)
bird2<-bird%>%
transmute(species,
time,
nesting,
status,
outcome=size,
y=as.numeric(outcome))
bird2$outcome<-factor(bird2$outcome,levels=c("large","small"))
pca1<-princomp(bird[c('time','nesting','size')])
bird2$predictor<-pca1$scores[,1]
fit4<-glm(y~predictor,data=bird2,family="binomial")
bird2$prob<-predict(fit4,type="response")
ggplot(bird2, aes(predictor,prob))+geom_point(alpha=.5,size=3)
library(plotROC)
prob1<-predict(fit4,type="response")
pred<-ifelse(prob1>.5,1,0)
table(truth=bird$size, prediction=pred)%>%addmargins
sens<-function(p,data=bird, y=y) mean(bird[bird$y==1,]$prob1>p)
spec<-function(p,data=bird, y=y) mean(bird[bird$y==0,]$prob1<p)
sensitivity<-sapply(seq(0,1,.01),sens,bird)
specificity<-sapply(seq(0,1,.01),spec,bird)
#Interactions
exp(coef(fit4))
ROCplot<-ggplot(bird)+geom_roc(aes(d=size,m=prob1), n.cuts=0)+  geom_segment(aes(x=0,xend=1,y=0,yend=1),lty=2)
ROCplot
library(glmnet)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE)
truth<-as.numeric(truth)-1
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
prob<-predict(fit4,type="response")
class_diag(prob,bird2$y)
calc_auc(bird2$y,prob)
library(glmnet)
class_diag<-function(probs,truth){
tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]
if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE)
truth<-as.numeric(truth)-1
ord<-order(probs, decreasing=TRUE)
probs <- probs[ord]; truth <- truth[ord]
TPR=cumsum(truth)/max(1,sum(truth))
FPR=cumsum(!truth)/max(1,sum(!truth))
dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
n <- length(TPR)
auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )
data.frame(acc,sens,spec,ppv,auc)
}
prob<-predict(fit4,type="response")
class_diag(prob,bird2$y)
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
install.packages("reticulate")
library(reticulate)
hi<-"Hello"
knitr::opts_chunk$set(python = reticulate::eng_python)
library(reticulate)
hi<-"Hello"
cat(c(hi,py$hi))
py_available()
py_discover_config()
sys.setenv(RETICULATE_PYTHON = PATH)
reticulate::use_python("~/AppData/Local/Programs/Python/Python38/python.exe", required = TRUE)
reticulate::use_python("~/StartMenu/Programs/Python/Python38/python.exe", required = TRUE)
reticulate::use_python("C:\Users\Sabrina\AppData\Local\Programs\Python\Python38", required = TRUE)
reticulate::use_python("~/Users/Sabrina/AppData/Local/Programs/Python/Python38", required = TRUE)
py_discover_config()
use_python("~\Users\Sabrina\AppData\Local\Programs\Python\Python38\python.exe")
use_python("~\Sabrina\AppData\Local\Programs\Python\Python38\python.exe")
use_python("~\AppData\Local\Programs\Python\Python38\python.exe")
use_python("C:\Users\Sabrina\AppData\Local\Programs\Python\Python38\python.exe")
devtools::install_github("rstudio/reticulate")
install.packages('devtools')
devtools::install_github("rstudio/reticulate")
py_config()
library(reticulate)
hi<-"Hello"
py_config()
library(reticulate)
hi<-"Hello"
use_python(C:/Users/Sabrina/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Python3.8)
use_python(C:Users/Sabrina/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Python3.8)
use_python("Users/Sabrina/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Python3.8")
Py_CompileString()
config$libpython()
use_python("Users/Sabrina/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Python3.8")
library(reticulate)
hi<-"Hello"
use_python("Users/Sabrina/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Python3.8")
library(reticulate)
hi<-"Hello"
use_python("Users/Sabrina/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Python3.8")
py_config()
py_config()
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
hi<-"Hello"
cat(c(hi,py$hi))
py_install(conda)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
hi<-"Hello"
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
hi<-"Hello"
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
hi<-"Hello"
library(reticulate)
hi<-"Hello"
cat(c(hi,py$hi))
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_version()
blogdown::serve_site()
